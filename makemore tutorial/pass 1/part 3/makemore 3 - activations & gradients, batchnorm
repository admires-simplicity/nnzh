{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b2b4df2b-272d-4b7d-adda-def3fd64a33b",
   "metadata": {},
   "source": [
    "<h2><b>makemore: part 3</b></h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4bee24a-3b69-490d-b9f7-a5fdd0cbc17e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# name generation model\n",
    "# based on this paper: https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f694b08d-9534-4b04-ab57-5ad37b89c24c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn.functional as F\n",
    "import matplotlib.pyplot as plt # for making figures\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e918d40a-6dd5-4d61-a6f5-ea7d05a999df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read  in all the words\n",
    "words = open('names.txt', 'r').read().splitlines()\n",
    "words[:8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fe49c448-a633-4076-9353-5d244ea8a0f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32033"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "97b384bf-c57e-4dce-ae24-6c9f51f7b0f4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}\n",
      "27\n"
     ]
    }
   ],
   "source": [
    "# build the vocabulary of characters and mappings to/from integers\n",
    "chars = sorted(list(set(''.join(words))))\n",
    "stoi = {s:i+1 for i,s in enumerate(chars)}\n",
    "stoi['.'] = 0\n",
    "itos = {i:s for s,i in stoi.items()}\n",
    "vocab_size = len(itos)\n",
    "print(itos)\n",
    "print(vocab_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5004cf44-226d-4c23-a423-280db68ee8cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([182437, 3]) torch.Size([182437])\n",
      "torch.Size([22781, 3]) torch.Size([22781])\n",
      "torch.Size([22928, 3]) torch.Size([22928])\n"
     ]
    }
   ],
   "source": [
    "block_size = 3 # context length: how many characters do we take to predict the next one?\n",
    "\n",
    "def build_dataset(words):\n",
    "    X, Y = [], []\n",
    "    for w in words:\n",
    "        context = [0] * block_size\n",
    "        for ch in w + '.':\n",
    "            ix = stoi[ch]\n",
    "            X.append(context)\n",
    "            Y.append(ix)\n",
    "            context = context[1:] + [ix] # crop first character and append, rolling window\n",
    "\n",
    "    X = torch.tensor(X)\n",
    "    Y = torch.tensor(Y)\n",
    "    print(X.shape, Y.shape)\n",
    "    return X, Y\n",
    "\n",
    "import random\n",
    "random.seed(42)\n",
    "random.shuffle(words)\n",
    "n1 = int(0.8*len(words))\n",
    "n2 = int(0.9*len(words))\n",
    "\n",
    "Xtr, Ytr = build_dataset(words[:n1])\n",
    "Xdev, Ydev = build_dataset(words[n1:n2])\n",
    "Xte, Yte = build_dataset(words[n2:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "adf87248-14c8-4fc2-ac4e-d46d3c345409",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11897\n"
     ]
    }
   ],
   "source": [
    "# same as MLP but with magic numbers put into variables\n",
    "n_embd = 10   # dimensionality of character embedding vectors\n",
    "n_hidden = 200 # number of neurons in hidden layer of the MLP\n",
    "\n",
    "g = torch.Generator().manual_seed(2 ** 31 - 1) # for reproducibility\n",
    "C = torch.randn((vocab_size, n_embd),             generator=g)\n",
    "W1 = torch.randn((n_embd * block_size, n_hidden), generator=g) * 0.2\n",
    "b1 = torch.randn(n_hidden,                        generator=g) * 0.01\n",
    "W2 = torch.randn((n_hidden, vocab_size),          generator=g) * 0.01\n",
    "b2 = torch.randn(vocab_size,                      generator=g) * 0\n",
    "\n",
    "parameters = [C, W1, b1, W2, b2]\n",
    "print(sum(p.nelement() for p in parameters)) # number of parameters in total\n",
    "for p in parameters:\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "a9c3003e-1b6c-40db-a50c-438b6bfd9481",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      0/ 200000: 2.0931\n"
     ]
    }
   ],
   "source": [
    "# same optimization as last time (refactored very slightly)\n",
    "\n",
    "max_steps = 200000\n",
    "batch_size = 32\n",
    "lossi = []\n",
    "\n",
    "for i in range(max_steps):   \n",
    "    \n",
    "    #minibatch construct\n",
    "    ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator=g)\n",
    "    Xb, Yb = Xtr[ix], Ytr[ix]\n",
    "\n",
    "    # forward pass    \n",
    "    emb = C[Xb] # embed the characters into vectors\n",
    "    embcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n",
    "    hpreact = embcat @ W1 + b1 # hidden layer pre-activation\n",
    "    h = torch.tanh(hpreact) # hidden layer\n",
    "    logits = h @ W2 + b2 # output layer\n",
    "    loss = F.cross_entropy(logits, Yb) # loss function\n",
    "\n",
    "    # backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    \n",
    "    # update\n",
    "    lr = 0.1 if i < 100000 else 0.01 # step learning rate decay\n",
    "    for p in parameters:\n",
    "        p.data += -lr * p.grad\n",
    "        \n",
    "    # track stats\n",
    "    if i % 10000 == 0: \n",
    "        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n",
    "    lossi.append(loss.log10().item())\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "0ff15dec-5593-4953-b44f-386b4793ba36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f1983382a10>"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20,10))\n",
    "plt.imshow(h.abs() > 0.99, cmap='gray', interpolation='nearest')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "95d7e4d6-6375-4da6-a294-d97b7eeedd22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1049.,  241.,  176.,  122.,  100.,   79.,   71.,   68.,   64.,\n",
       "          57.,   62.,   66.,   54.,   64.,   66.,   69.,   71.,   59.,\n",
       "          67.,   85.,   76.,   94.,   76.,  122.,   88.,   91.,   71.,\n",
       "          86.,   76.,   87.,   74.,   72.,   69.,   67.,   49.,   62.,\n",
       "          62.,   63.,   78.,   62.,   64.,   84.,   64.,   82.,   92.,\n",
       "         102.,  111.,  168.,  252., 1166.]),\n",
       " array([-1.00000000e+00, -9.60000002e-01, -9.20000005e-01, -8.80000007e-01,\n",
       "        -8.40000010e-01, -8.00000012e-01, -7.60000014e-01, -7.20000017e-01,\n",
       "        -6.80000019e-01, -6.40000021e-01, -6.00000024e-01, -5.60000026e-01,\n",
       "        -5.20000029e-01, -4.80000031e-01, -4.40000033e-01, -4.00000036e-01,\n",
       "        -3.60000038e-01, -3.20000041e-01, -2.80000043e-01, -2.40000045e-01,\n",
       "        -2.00000048e-01, -1.60000050e-01, -1.20000052e-01, -8.00000548e-02,\n",
       "        -4.00000572e-02, -5.96046448e-08,  3.99999380e-02,  7.99999356e-02,\n",
       "         1.19999933e-01,  1.59999931e-01,  1.99999928e-01,  2.39999926e-01,\n",
       "         2.79999924e-01,  3.19999921e-01,  3.59999919e-01,  3.99999917e-01,\n",
       "         4.39999914e-01,  4.79999912e-01,  5.19999909e-01,  5.59999907e-01,\n",
       "         5.99999905e-01,  6.39999902e-01,  6.79999900e-01,  7.19999897e-01,\n",
       "         7.59999895e-01,  7.99999893e-01,  8.39999890e-01,  8.79999888e-01,\n",
       "         9.19999886e-01,  9.59999883e-01,  9.99999881e-01]),\n",
       " <BarContainer object of 50 artists>)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(h.view(-1).tolist(), 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "7010d9ce-8a9a-4c9f-bf7c-bb96fb8ad908",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([  1.,   1.,   3.,   2.,   2.,   3.,   5.,   9.,  18.,  15.,  28.,\n",
       "         31.,  26.,  60.,  65.,  83.,  93., 121., 144., 181., 225., 257.,\n",
       "        286., 297., 386., 640., 721., 456., 350., 294., 257., 258., 192.,\n",
       "        190., 143., 132.,  75.,  93.,  68.,  54.,  28.,  33.,  24.,  17.,\n",
       "         12.,   8.,   6.,   3.,   2.,   2.]),\n",
       " array([-9.28856564, -8.93389982, -8.57923401, -8.2245682 , -7.86990238,\n",
       "        -7.51523657, -7.16057076, -6.80590494, -6.45123913, -6.09657331,\n",
       "        -5.7419075 , -5.38724169, -5.03257587, -4.67791006, -4.32324425,\n",
       "        -3.96857843, -3.61391262, -3.25924681, -2.90458099, -2.54991518,\n",
       "        -2.19524937, -1.84058355, -1.48591774, -1.13125193, -0.77658611,\n",
       "        -0.4219203 , -0.06725449,  0.28741133,  0.64207714,  0.99674295,\n",
       "         1.35140877,  1.70607458,  2.06074039,  2.41540621,  2.77007202,\n",
       "         3.12473783,  3.47940365,  3.83406946,  4.18873528,  4.54340109,\n",
       "         4.8980669 ,  5.25273272,  5.60739853,  5.96206434,  6.31673016,\n",
       "         6.67139597,  7.02606178,  7.3807276 ,  7.73539341,  8.09005922,\n",
       "         8.44472504]),\n",
       " <BarContainer object of 50 artists>)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(hpreact.view(-1).tolist(), 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "9eab6246-b2af-40f4-81b9-5eecb167f1cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f19836e4610>]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(lossi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "a4eefdb5-1eba-4c6f-8b09-aba412b83007",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train 2.0355138778686523\n",
      "val 2.118773937225342\n"
     ]
    }
   ],
   "source": [
    "@torch.no_grad() # decorator disables gradient tracking\n",
    "def split_loss(split):\n",
    "    x, y = {\n",
    "        'train': (Xtr, Ytr),\n",
    "        'val': (Xdev, Ydev),\n",
    "        'test': (Xte, Yte),\n",
    "    }[split]\n",
    "    emb = C[x] # (N, block_size, n_embd)\n",
    "    embcat = emb.view(emb.shape[0], -1) # concat into (N, Block_size * n_embd)\n",
    "    h = torch.tanh(embcat @ W1 + b1) # (N, n_hidden)\n",
    "    logits = h @ W2 + b2 # (N, vocab_size)\n",
    "    loss = F.cross_entropy(logits, y)\n",
    "    print(split, loss.item())\n",
    "\n",
    "split_loss('train')\n",
    "split_loss('val')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "47696b32-d58f-4caa-943b-76c4500acb5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mohani.\n",
      "yazliee.\n",
      "med.\n",
      "rylee.\n",
      "emmaschadrie.\n",
      "cadelynnelin.\n",
      "shy.\n",
      "jen.\n",
      "eden.\n",
      "edora.\n",
      "raelynn.\n",
      "honelin.\n",
      "shubvogihira.\n",
      "jayleighten.\n",
      "panthona.\n",
      "uba.\n",
      "geder.\n",
      "yarue.\n",
      "ehs.\n",
      "kayshus.\n",
      "kyan.\n",
      "hal.\n",
      "salynn.\n",
      "una.\n",
      "alel.\n",
      "june.\n",
      "jare.\n",
      "kiveah.\n",
      "charadilfen.\n",
      "oeona.\n",
      "ziei.\n",
      "joreney.\n",
      "conna.\n",
      "oluis.\n",
      "kiri.\n",
      "evon.\n",
      "walla.\n",
      "ortarah.\n",
      "tani.\n",
      "sira.\n",
      "alitan.\n",
      "debis.\n",
      "vid.\n",
      "mellakeyanna.\n",
      "sxantavika.\n",
      "caelick.\n",
      "jameagda.\n",
      "ived.\n",
      "jhevarley.\n",
      "jayeranco.\n",
      "ally.\n",
      "cravica.\n",
      "jovon.\n",
      "eth.\n",
      "yanneko.\n",
      "jairy.\n",
      "novanna.\n",
      "sady.\n",
      "shony.\n",
      "jere.\n",
      "neja.\n",
      "daenes.\n",
      "ama.\n",
      "coper.\n",
      "tyree.\n",
      "bren.\n",
      "cadelas.\n",
      "leighten.\n",
      "margo.\n",
      "willord.\n",
      "kamao.\n",
      "aco.\n",
      "kathan.\n",
      "kenna.\n",
      "mikel.\n",
      "karresselo.\n",
      "ansh.\n",
      "asanic.\n",
      "ciretance.\n",
      "rylee.\n",
      "marya.\n",
      "kayla.\n",
      "khammalayden.\n",
      "lavon.\n",
      "izzy.\n",
      "zayoralyn.\n",
      "ky.\n",
      "treyline.\n",
      "jaxxin.\n",
      "tomerrie.\n",
      "meriadianya.\n",
      "anase.\n",
      "zeyvon.\n",
      "bariah.\n",
      "athj.\n",
      "kani.\n",
      "syn.\n",
      "eden.\n",
      "seden.\n",
      "has.\n"
     ]
    }
   ],
   "source": [
    "#sample from the model\n",
    "g = torch.Generator().manual_seed(2 ** 31 - 1 + 10)\n",
    "\n",
    "for _ in range(100):\n",
    "    \n",
    "    out = []\n",
    "    context = [0] * block_size\n",
    "    while True:\n",
    "        # forward pass the neural net\n",
    "        emb = C[torch.tensor([context])] # (1, block_size, n_embd)\n",
    "        h = torch.tanh(emb.view(1, -1) @ W1 + b1)\n",
    "        logits = h @ W2 + b2\n",
    "        probs = F.softmax(logits, dim=1)\n",
    "        # sample from the distribution\n",
    "        ix = torch.multinomial(probs, num_samples=1, generator=g).item()\n",
    "        # shift context window and track the samples\n",
    "        context = context[1:] + [ix]\n",
    "        out.append(ix)\n",
    "        if ix == 0:\n",
    "            break\n",
    "\n",
    "    print(''.join(itos[i] for i in out)) # decode and print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b215dd67-08bf-41b5-88fe-e8bbbe157d5a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2cf6def-7f71-4c7f-a765-9a078069e8ac",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52de6ba1-f78c-48d5-b9d0-6db1f9d9bc47",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
